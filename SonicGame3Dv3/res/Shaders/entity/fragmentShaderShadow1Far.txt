#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
in vec3 worldposition;
in vec4 shadowCoordsFar;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform sampler2D shadowMapFar;
uniform float hasTransparency;
uniform float glowAmount;
uniform sampler2D randomMap;

const float totalTexels = 5;

const vec2 it1 = vec2(-1, -1) * 0.00012207031;
const vec2 it2 = vec2(-1,  1) * 0.00012207031;
const vec2 it3 = vec2( 1,  1) * 0.00012207031;
const vec2 it4 = vec2( 1, -1) * 0.00012207031;

void main(void)
{
	vec4 rawTextureColour = texture(textureSampler, pass_textureCoords);
	if (hasTransparency == 0) //&& glowAmount == 0
	{
		if (rawTextureColour.a < 0.9)
		{
			discard;
		}
		rawTextureColour.a = 1;
	}
	
	
	int count = 0;
	
	vec2 fragCoordNormalized = gl_FragCoord.xy / 128.0; //128 is size of the randomMap.png
	
	vec4 randomSample = texture(randomMap, vec2(0.0 , 0.0) + fragCoordNormalized);
	
	count += (floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it1 + 0.00012207031*(randomSample.rg)).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	count += (floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it2 + 0.00012207031*(randomSample.ba)).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.0 , 0.1) + fragCoordNormalized);
	count += (floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it3 + 0.00012207031*(randomSample.rg)).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	count += (floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it4 + 0.00012207031*(randomSample.ba)).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.1 , 0.0) + fragCoordNormalized);
	count += (floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +       0.00012207031*(randomSample.rg)).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	
	float total = (float(count)/totalTexels);
	
	float lightFactor = 1.0 - (total * shadowCoordsFar.w * 0.4); //0.4 being how dark the shadows are
	
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = nDotl*0.5+0.5;  //two different types of lighting options
	//float brightness = max(nDotl, 0.5);  //two different types of lighting options
	
	//make more ambient light happen during the daytime, less at night
	float ambientLight = 0.5+0.5*dot(vec3(0, 1, 0), unitLightVector);
	ambientLight = (0.02+ambientLight*0.3);
	
	
	vec3 diffuse = max(brightness * lightColour * lightFactor, ambientLight * lightColour);
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	finalSpecular = finalSpecular * (lightFactor - 0.6) * 2.5; //Make no specular lighting happen it the shadow
	
	//if (glowAmount > 0.0)
	//{
		//diffuse = vec3(glowAmount);
	//}
	//same as above, but no branching
	diffuse = diffuse*((floatBitsToInt(glowAmount-0.001) >> 31) & 1) + vec3(glowAmount)*((floatBitsToInt(0.001-glowAmount) >> 31) & 1);
	
	out_Color = vec4(diffuse, rawTextureColour.a) * rawTextureColour + vec4(finalSpecular, rawTextureColour.a);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}