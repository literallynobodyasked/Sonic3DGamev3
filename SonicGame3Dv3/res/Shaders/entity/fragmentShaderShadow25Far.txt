//#version 400 core
//
//in vec2 pass_textureCoords;
//in vec3 surfaceNormal;
//in vec3 toLightVector;
//in vec3 toCameraVector;
//in float visibility;
//in vec3 worldposition;
//in vec4 shadowCoordsFar;
//
//out vec4 out_Color;
//
//uniform sampler2D textureSampler;
//uniform vec3 lightColour;
//uniform float shineDamper;
//uniform float reflectivity;
//uniform vec3 skyColour;
//uniform sampler2D shadowMapFar;
//uniform float hasTransparency;
//uniform float glowAmount;
//
////const int pcfCount = 2;
//const float totalTexels = 25;//(pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0); //25
//
////const float mapSize = 8192; //2048*4    Must be kept in sync with constants in c++ code
////const float texelSize = 0.00012207031;  //1.0 / mapSize
//
//const vec2 it1  = vec2(-2, -2) * 0.00012207031;
//const vec2 it2  = vec2(-2, -1) * 0.00012207031;
//const vec2 it3  = vec2(-2,  0) * 0.00012207031;
//const vec2 it4  = vec2(-2,  1) * 0.00012207031;
//const vec2 it5  = vec2(-2,  2) * 0.00012207031;
//
//const vec2 it6  = vec2(-1, -2) * 0.00012207031;
//const vec2 it7  = vec2(-1, -1) * 0.00012207031;
//const vec2 it8  = vec2(-1,  0) * 0.00012207031;
//const vec2 it9  = vec2(-1,  1) * 0.00012207031;
//const vec2 it10 = vec2(-1,  2) * 0.00012207031;
//
//const vec2 it11 = vec2( 0, -2) * 0.00012207031;
//const vec2 it12 = vec2( 0, -1) * 0.00012207031;
//const vec2 it13 = vec2( 0,  0) * 0.00012207031;
//const vec2 it14 = vec2( 0,  1) * 0.00012207031;
//const vec2 it15 = vec2( 0,  2) * 0.00012207031;
//
//const vec2 it16 = vec2( 1, -2) * 0.00012207031;
//const vec2 it17 = vec2( 1, -1) * 0.00012207031;
//const vec2 it18 = vec2( 1,  0) * 0.00012207031;
//const vec2 it19 = vec2( 1,  1) * 0.00012207031;
//const vec2 it20 = vec2( 1,  2) * 0.00012207031;
//
//const vec2 it21 = vec2( 2, -2) * 0.00012207031;
//const vec2 it22 = vec2( 2, -1) * 0.00012207031;
//const vec2 it23 = vec2( 2,  0) * 0.00012207031;
//const vec2 it24 = vec2( 2,  1) * 0.00012207031;
//const vec2 it25 = vec2( 2,  2) * 0.00012207031;
//
//void main(void)
//{
//	vec4 rawTextureColour = texture(textureSampler, pass_textureCoords);
//	if (hasTransparency == 0) //&& glowAmount == 0
//	{
//		if (rawTextureColour.a < 0.9)
//		{
//			discard;
//		}
//		rawTextureColour.a = 1;
//	}
//	
//	vec3 unitNormal = normalize(surfaceNormal);
//	vec3 unitLightVector = normalize(toLightVector);
//	
//	float nDotl = dot(unitNormal, unitLightVector);
//	
//	
//	
//	int countFar = 0;
//	//float bias = 0.00125 * tan(acos(nDotl));
//	//bias = clamp(bias, 0.0, 0.01);
//	
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it1).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it2).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it3).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it4).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it5).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it6).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it7).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it8).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it9).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it10).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it11).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it12).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it13).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it14).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it15).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it16).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it17).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it18).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it19).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it20).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it21).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it22).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it23).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it24).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it25).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
//	
//	float totalFar = (float(countFar)/totalTexels);
//	
//	float lightFactor = 1.0 - (totalFar * shadowCoordsFar.w * 0.4); //0.4 being how dark the shadows are
//	
//	
//	float brightness = nDotl*0.5+0.5;  //two different types of lighting options
//	//float brightness = max(nDotl, 0.5);  //two different types of lighting options
//	
//	//make more ambient light happen during the daytime, less at night
//	float ambientLight = 0.5+0.5*dot(vec3(0, 1, 0), unitLightVector);
//	ambientLight = (0.02+ambientLight*0.3);
//	
//	
//	vec3 diffuse = max(brightness * lightColour * lightFactor, ambientLight * lightColour);
//	
//	vec3 unitVectorToCamera = normalize(toCameraVector);
//	vec3 lightDirection = -unitLightVector;
//	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
//	
//	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
//	specularFactor = max(specularFactor, 0.0);
//	float dampedFactor = pow(specularFactor, shineDamper);
//	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
//	
//	finalSpecular = finalSpecular * (lightFactor - 0.6) * 2.5; //Make no specular lighting happen it the shadow
//	
//	if (glowAmount > 0.0)
//	{
//		diffuse = vec3(glowAmount);
//	}
//	
//	out_Color = vec4(diffuse, rawTextureColour.a) * rawTextureColour + vec4(finalSpecular, rawTextureColour.a);
//	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
//}









#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;
in vec3 worldposition;
in vec4 shadowCoordsFar;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;
uniform sampler2D shadowMapFar;
uniform float hasTransparency;
uniform float glowAmount;
uniform sampler2D randomMap;

const float totalTexels = 25;

const vec2 it1  = vec2(-2 , -2) * 0.00012207031 * 1;
const vec2 it2  = vec2(-2 , -1) * 0.00012207031 * 1;
const vec2 it3  = vec2(-2 ,  0) * 0.00012207031 * 1;
const vec2 it4  = vec2(-2 ,  1) * 0.00012207031 * 1;
const vec2 it5  = vec2(-2 ,  2) * 0.00012207031 * 1;
const vec2 it6  = vec2(-1 , -2) * 0.00012207031 * 1;
const vec2 it7  = vec2(-1 , -1) * 0.00012207031 * 1;
const vec2 it8  = vec2(-1 ,  0) * 0.00012207031 * 1;
const vec2 it9  = vec2(-1 ,  1) * 0.00012207031 * 1;
const vec2 it10 = vec2(-1 ,  2) * 0.00012207031 * 1;
const vec2 it11 = vec2( 0 , -2) * 0.00012207031 * 1;
const vec2 it12 = vec2( 0 , -1) * 0.00012207031 * 1;
//const vec2 it13 = vec2( 0 ,  0) * 0.00012207031 * 1;
const vec2 it14 = vec2( 0 ,  1) * 0.00012207031 * 1;
const vec2 it15 = vec2( 0 ,  2) * 0.00012207031 * 1;
const vec2 it16 = vec2( 1 , -2) * 0.00012207031 * 1;
const vec2 it17 = vec2( 1 , -1) * 0.00012207031 * 1;
const vec2 it18 = vec2( 1 ,  0) * 0.00012207031 * 1;
const vec2 it19 = vec2( 1 ,  1) * 0.00012207031 * 1;
const vec2 it20 = vec2( 1 ,  2) * 0.00012207031 * 1;
const vec2 it21 = vec2( 2 , -2) * 0.00012207031 * 1;
const vec2 it22 = vec2( 2 , -1) * 0.00012207031 * 1;
const vec2 it23 = vec2( 2 ,  0) * 0.00012207031 * 1;
const vec2 it24 = vec2( 2 ,  1) * 0.00012207031 * 1;
const vec2 it25 = vec2( 2 ,  2) * 0.00012207031 * 1;

void main(void)
{
	vec4 rawTextureColour = texture(textureSampler, pass_textureCoords);
	if (hasTransparency == 0) //&& glowAmount == 0
	{
		if (rawTextureColour.a < 0.9)
		{
			discard;
		}
		rawTextureColour.a = 1;
	}
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float nDotl = dot(unitNormal, unitLightVector);
	
	int countFar = 0;

	vec2 fragCoordNormalized = gl_FragCoord.xy / 128.0; //128 is size of the randomMap.png
	
	//cheap test samples
	vec4 randomSample = texture(randomMap, vec2(0.3 , 0.1) + fragCoordNormalized);
	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it1 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it5 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.3 , 0.2) + fragCoordNormalized);
	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +        0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it21 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.4 , 0.0) + fragCoordNormalized);
	countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it25 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
	
	float totalFar = (float(countFar)/5);
	
	if ((totalFar - 1)*totalFar != 0)
	{
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it2 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.0 , 0.0) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it3 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it4 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.0 , 0.1) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it6 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it7 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.0 , 0.2) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it8 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy +  it9 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.1 , 0.0) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it10 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it11 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.1 , 0.1) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it12 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it14 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.1 , 0.2) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it15 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it16 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.2 , 0.0) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it17 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it18 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.2 , 0.1) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it19 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it20 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.2 , 0.2) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it22 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it23 + 0.00012207031*(randomSample).ba).r+0.00125) - shadowCoordsFar.z) >> 31) & 1; randomSample = texture(randomMap, vec2(0.3 , 0.0) + fragCoordNormalized);
		countFar += ( floatBitsToInt((texture(shadowMapFar, shadowCoordsFar.xy + it24 + 0.00012207031*(randomSample).rg).r+0.00125) - shadowCoordsFar.z) >> 31) & 1;
		
		totalFar = (float(countFar)/totalTexels);
	}
	
	float lightFactor = 1.0 - (totalFar * shadowCoordsFar.w * 0.4); //0.4 being how dark the shadows are
	
	float brightness = nDotl*0.5+0.5;  //two different types of lighting options
	//float brightness = max(nDotl, 0.5);  //two different types of lighting options
	
	//make more ambient light happen during the daytime, less at night
	float ambientLight = 0.5+0.5*dot(vec3(0, 1, 0), unitLightVector);
	ambientLight = (0.02+ambientLight*0.3);
	
	
	vec3 diffuse = max(brightness * lightColour * lightFactor, ambientLight * lightColour);
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	finalSpecular = finalSpecular * (lightFactor - 0.6) * 2.5; //Make no specular lighting happen it the shadow
	
	//if (glowAmount > 0.0)
	//{
		//diffuse = vec3(glowAmount);
	//}
	//same as above, but no branching
	diffuse = diffuse*((floatBitsToInt(glowAmount-0.001) >> 31) & 1) + vec3(glowAmount)*((floatBitsToInt(0.001-glowAmount) >> 31) & 1);
	
	out_Color = vec4(diffuse, rawTextureColour.a) * rawTextureColour + vec4(finalSpecular, rawTextureColour.a);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}